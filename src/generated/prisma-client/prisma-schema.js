module.exports = {
  typeDefs: // Code generated by Prisma (prisma@1.31.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

  /* GraphQL */ `type AggregateBrand {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateDepartment {
  count: Int!
}

type AggregateFeed {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductEntity {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Brand {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  description: String!
  images: [Image!]
  category(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  department(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department!]
  product(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type BrandConnection {
  pageInfo: PageInfo!
  edges: [BrandEdge]!
  aggregate: AggregateBrand!
}

input BrandCreateInput {
  id: ID
  name: String!
  slug: String!
  description: String!
  images: ImageCreateManyInput
  category: CategoryCreateManyWithoutBrandInput
  department: DepartmentCreateManyWithoutBrandInput
  product: ProductCreateManyWithoutBrandInput
}

input BrandCreateManyWithoutCategoryInput {
  create: [BrandCreateWithoutCategoryInput!]
  connect: [BrandWhereUniqueInput!]
}

input BrandCreateManyWithoutDepartmentInput {
  create: [BrandCreateWithoutDepartmentInput!]
  connect: [BrandWhereUniqueInput!]
}

input BrandCreateOneWithoutProductInput {
  create: BrandCreateWithoutProductInput
  connect: BrandWhereUniqueInput
}

input BrandCreateWithoutCategoryInput {
  id: ID
  name: String!
  slug: String!
  description: String!
  images: ImageCreateManyInput
  department: DepartmentCreateManyWithoutBrandInput
  product: ProductCreateManyWithoutBrandInput
}

input BrandCreateWithoutDepartmentInput {
  id: ID
  name: String!
  slug: String!
  description: String!
  images: ImageCreateManyInput
  category: CategoryCreateManyWithoutBrandInput
  product: ProductCreateManyWithoutBrandInput
}

input BrandCreateWithoutProductInput {
  id: ID
  name: String!
  slug: String!
  description: String!
  images: ImageCreateManyInput
  category: CategoryCreateManyWithoutBrandInput
  department: DepartmentCreateManyWithoutBrandInput
}

type BrandEdge {
  node: Brand!
  cursor: String!
}

enum BrandOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  description_ASC
  description_DESC
}

type BrandPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  description: String!
}

input BrandScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [BrandScalarWhereInput!]
  OR: [BrandScalarWhereInput!]
  NOT: [BrandScalarWhereInput!]
}

type BrandSubscriptionPayload {
  mutation: MutationType!
  node: Brand
  updatedFields: [String!]
  previousValues: BrandPreviousValues
}

input BrandSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BrandWhereInput
  AND: [BrandSubscriptionWhereInput!]
}

input BrandUpdateInput {
  name: String
  slug: String
  description: String
  images: ImageUpdateManyInput
  category: CategoryUpdateManyWithoutBrandInput
  department: DepartmentUpdateManyWithoutBrandInput
  product: ProductUpdateManyWithoutBrandInput
}

input BrandUpdateManyDataInput {
  name: String
  slug: String
  description: String
}

input BrandUpdateManyMutationInput {
  name: String
  slug: String
  description: String
}

input BrandUpdateManyWithoutCategoryInput {
  create: [BrandCreateWithoutCategoryInput!]
  delete: [BrandWhereUniqueInput!]
  connect: [BrandWhereUniqueInput!]
  set: [BrandWhereUniqueInput!]
  disconnect: [BrandWhereUniqueInput!]
  update: [BrandUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [BrandUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [BrandScalarWhereInput!]
  updateMany: [BrandUpdateManyWithWhereNestedInput!]
}

input BrandUpdateManyWithoutDepartmentInput {
  create: [BrandCreateWithoutDepartmentInput!]
  delete: [BrandWhereUniqueInput!]
  connect: [BrandWhereUniqueInput!]
  set: [BrandWhereUniqueInput!]
  disconnect: [BrandWhereUniqueInput!]
  update: [BrandUpdateWithWhereUniqueWithoutDepartmentInput!]
  upsert: [BrandUpsertWithWhereUniqueWithoutDepartmentInput!]
  deleteMany: [BrandScalarWhereInput!]
  updateMany: [BrandUpdateManyWithWhereNestedInput!]
}

input BrandUpdateManyWithWhereNestedInput {
  where: BrandScalarWhereInput!
  data: BrandUpdateManyDataInput!
}

input BrandUpdateOneRequiredWithoutProductInput {
  create: BrandCreateWithoutProductInput
  update: BrandUpdateWithoutProductDataInput
  upsert: BrandUpsertWithoutProductInput
  connect: BrandWhereUniqueInput
}

input BrandUpdateWithoutCategoryDataInput {
  name: String
  slug: String
  description: String
  images: ImageUpdateManyInput
  department: DepartmentUpdateManyWithoutBrandInput
  product: ProductUpdateManyWithoutBrandInput
}

input BrandUpdateWithoutDepartmentDataInput {
  name: String
  slug: String
  description: String
  images: ImageUpdateManyInput
  category: CategoryUpdateManyWithoutBrandInput
  product: ProductUpdateManyWithoutBrandInput
}

input BrandUpdateWithoutProductDataInput {
  name: String
  slug: String
  description: String
  images: ImageUpdateManyInput
  category: CategoryUpdateManyWithoutBrandInput
  department: DepartmentUpdateManyWithoutBrandInput
}

input BrandUpdateWithWhereUniqueWithoutCategoryInput {
  where: BrandWhereUniqueInput!
  data: BrandUpdateWithoutCategoryDataInput!
}

input BrandUpdateWithWhereUniqueWithoutDepartmentInput {
  where: BrandWhereUniqueInput!
  data: BrandUpdateWithoutDepartmentDataInput!
}

input BrandUpsertWithoutProductInput {
  update: BrandUpdateWithoutProductDataInput!
  create: BrandCreateWithoutProductInput!
}

input BrandUpsertWithWhereUniqueWithoutCategoryInput {
  where: BrandWhereUniqueInput!
  update: BrandUpdateWithoutCategoryDataInput!
  create: BrandCreateWithoutCategoryInput!
}

input BrandUpsertWithWhereUniqueWithoutDepartmentInput {
  where: BrandWhereUniqueInput!
  update: BrandUpdateWithoutDepartmentDataInput!
  create: BrandCreateWithoutDepartmentInput!
}

input BrandWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  images_some: ImageWhereInput
  images_every: ImageRestrictedWhereInput
  images_none: ImageRestrictedWhereInput
  category_some: CategoryWhereInput
  department_some: DepartmentWhereInput
  product_some: ProductWhereInput
  AND: [BrandWhereInput!]
}

input BrandWhereUniqueInput {
  id: ID
}

type Category {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String!
  name: String!
  slug: String!
  images: [Image!]
  brand(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Brand!]
  department(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department!]
  product(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  description: String!
  name: String!
  slug: String!
  images: ImageCreateManyInput
  brand: BrandCreateManyWithoutCategoryInput
  department: DepartmentCreateManyWithoutCategoryInput
  product: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateManyWithoutBrandInput {
  create: [CategoryCreateWithoutBrandInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateManyWithoutDepartmentInput {
  create: [CategoryCreateWithoutDepartmentInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateOneWithoutProductInput {
  create: CategoryCreateWithoutProductInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutBrandInput {
  id: ID
  description: String!
  name: String!
  slug: String!
  images: ImageCreateManyInput
  department: DepartmentCreateManyWithoutCategoryInput
  product: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutDepartmentInput {
  id: ID
  description: String!
  name: String!
  slug: String!
  images: ImageCreateManyInput
  brand: BrandCreateManyWithoutCategoryInput
  product: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutProductInput {
  id: ID
  description: String!
  name: String!
  slug: String!
  images: ImageCreateManyInput
  brand: BrandCreateManyWithoutCategoryInput
  department: DepartmentCreateManyWithoutCategoryInput
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  description_ASC
  description_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
}

type CategoryPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String!
  name: String!
  slug: String!
}

input CategoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  AND: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  description: String
  name: String
  slug: String
  images: ImageUpdateManyInput
  brand: BrandUpdateManyWithoutCategoryInput
  department: DepartmentUpdateManyWithoutCategoryInput
  product: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyDataInput {
  description: String
  name: String
  slug: String
}

input CategoryUpdateManyMutationInput {
  description: String
  name: String
  slug: String
}

input CategoryUpdateManyWithoutBrandInput {
  create: [CategoryCreateWithoutBrandInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutBrandInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutBrandInput!]
  deleteMany: [CategoryScalarWhereInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
}

input CategoryUpdateManyWithoutDepartmentInput {
  create: [CategoryCreateWithoutDepartmentInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutDepartmentInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutDepartmentInput!]
  deleteMany: [CategoryScalarWhereInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyDataInput!
}

input CategoryUpdateOneRequiredWithoutProductInput {
  create: CategoryCreateWithoutProductInput
  update: CategoryUpdateWithoutProductDataInput
  upsert: CategoryUpsertWithoutProductInput
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateWithoutBrandDataInput {
  description: String
  name: String
  slug: String
  images: ImageUpdateManyInput
  department: DepartmentUpdateManyWithoutCategoryInput
  product: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutDepartmentDataInput {
  description: String
  name: String
  slug: String
  images: ImageUpdateManyInput
  brand: BrandUpdateManyWithoutCategoryInput
  product: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutProductDataInput {
  description: String
  name: String
  slug: String
  images: ImageUpdateManyInput
  brand: BrandUpdateManyWithoutCategoryInput
  department: DepartmentUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithWhereUniqueWithoutBrandInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutBrandDataInput!
}

input CategoryUpdateWithWhereUniqueWithoutDepartmentInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutDepartmentDataInput!
}

input CategoryUpsertWithoutProductInput {
  update: CategoryUpdateWithoutProductDataInput!
  create: CategoryCreateWithoutProductInput!
}

input CategoryUpsertWithWhereUniqueWithoutBrandInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutBrandDataInput!
  create: CategoryCreateWithoutBrandInput!
}

input CategoryUpsertWithWhereUniqueWithoutDepartmentInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutDepartmentDataInput!
  create: CategoryCreateWithoutDepartmentInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  images_some: ImageWhereInput
  images_every: ImageRestrictedWhereInput
  images_none: ImageRestrictedWhereInput
  brand_some: BrandWhereInput
  department_some: DepartmentWhereInput
  product_some: ProductWhereInput
  AND: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
}

type Color {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  slug: String!
  value: String!
}

input ColorCreateInput {
  id: ID
  slug: String!
  value: String!
}

input ColorCreateOneInput {
  create: ColorCreateInput
}

input ColorUpdateDataInput {
  slug: String
  value: String
}

input ColorUpdateOneRequiredInput {
  create: ColorCreateInput
  update: ColorUpdateDataInput
  upsert: ColorUpsertNestedInput
  connect: ColorWhereUniqueInput
}

input ColorUpsertNestedInput {
  update: ColorUpdateDataInput!
  create: ColorCreateInput!
}

input ColorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [ColorWhereInput!]
}

input ColorWhereUniqueInput {
  id: ID
}

scalar DateTime

type Department {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String!
  name: String!
  slug: String!
  brand(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Brand!]
  category(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  images: [Image!]
}

type DepartmentConnection {
  pageInfo: PageInfo!
  edges: [DepartmentEdge]!
  aggregate: AggregateDepartment!
}

input DepartmentCreateInput {
  id: ID
  description: String!
  name: String!
  slug: String!
  brand: BrandCreateManyWithoutDepartmentInput
  category: CategoryCreateManyWithoutDepartmentInput
  images: ImageCreateManyInput
}

input DepartmentCreateManyWithoutBrandInput {
  create: [DepartmentCreateWithoutBrandInput!]
  connect: [DepartmentWhereUniqueInput!]
}

input DepartmentCreateManyWithoutCategoryInput {
  create: [DepartmentCreateWithoutCategoryInput!]
  connect: [DepartmentWhereUniqueInput!]
}

input DepartmentCreateWithoutBrandInput {
  id: ID
  description: String!
  name: String!
  slug: String!
  category: CategoryCreateManyWithoutDepartmentInput
  images: ImageCreateManyInput
}

input DepartmentCreateWithoutCategoryInput {
  id: ID
  description: String!
  name: String!
  slug: String!
  brand: BrandCreateManyWithoutDepartmentInput
  images: ImageCreateManyInput
}

type DepartmentEdge {
  node: Department!
  cursor: String!
}

enum DepartmentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  description_ASC
  description_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
}

type DepartmentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String!
  name: String!
  slug: String!
}

input DepartmentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  AND: [DepartmentScalarWhereInput!]
  OR: [DepartmentScalarWhereInput!]
  NOT: [DepartmentScalarWhereInput!]
}

type DepartmentSubscriptionPayload {
  mutation: MutationType!
  node: Department
  updatedFields: [String!]
  previousValues: DepartmentPreviousValues
}

input DepartmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DepartmentWhereInput
  AND: [DepartmentSubscriptionWhereInput!]
}

input DepartmentUpdateInput {
  description: String
  name: String
  slug: String
  brand: BrandUpdateManyWithoutDepartmentInput
  category: CategoryUpdateManyWithoutDepartmentInput
  images: ImageUpdateManyInput
}

input DepartmentUpdateManyDataInput {
  description: String
  name: String
  slug: String
}

input DepartmentUpdateManyMutationInput {
  description: String
  name: String
  slug: String
}

input DepartmentUpdateManyWithoutBrandInput {
  create: [DepartmentCreateWithoutBrandInput!]
  delete: [DepartmentWhereUniqueInput!]
  connect: [DepartmentWhereUniqueInput!]
  set: [DepartmentWhereUniqueInput!]
  disconnect: [DepartmentWhereUniqueInput!]
  update: [DepartmentUpdateWithWhereUniqueWithoutBrandInput!]
  upsert: [DepartmentUpsertWithWhereUniqueWithoutBrandInput!]
  deleteMany: [DepartmentScalarWhereInput!]
  updateMany: [DepartmentUpdateManyWithWhereNestedInput!]
}

input DepartmentUpdateManyWithoutCategoryInput {
  create: [DepartmentCreateWithoutCategoryInput!]
  delete: [DepartmentWhereUniqueInput!]
  connect: [DepartmentWhereUniqueInput!]
  set: [DepartmentWhereUniqueInput!]
  disconnect: [DepartmentWhereUniqueInput!]
  update: [DepartmentUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [DepartmentUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [DepartmentScalarWhereInput!]
  updateMany: [DepartmentUpdateManyWithWhereNestedInput!]
}

input DepartmentUpdateManyWithWhereNestedInput {
  where: DepartmentScalarWhereInput!
  data: DepartmentUpdateManyDataInput!
}

input DepartmentUpdateWithoutBrandDataInput {
  description: String
  name: String
  slug: String
  category: CategoryUpdateManyWithoutDepartmentInput
  images: ImageUpdateManyInput
}

input DepartmentUpdateWithoutCategoryDataInput {
  description: String
  name: String
  slug: String
  brand: BrandUpdateManyWithoutDepartmentInput
  images: ImageUpdateManyInput
}

input DepartmentUpdateWithWhereUniqueWithoutBrandInput {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateWithoutBrandDataInput!
}

input DepartmentUpdateWithWhereUniqueWithoutCategoryInput {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateWithoutCategoryDataInput!
}

input DepartmentUpsertWithWhereUniqueWithoutBrandInput {
  where: DepartmentWhereUniqueInput!
  update: DepartmentUpdateWithoutBrandDataInput!
  create: DepartmentCreateWithoutBrandInput!
}

input DepartmentUpsertWithWhereUniqueWithoutCategoryInput {
  where: DepartmentWhereUniqueInput!
  update: DepartmentUpdateWithoutCategoryDataInput!
  create: DepartmentCreateWithoutCategoryInput!
}

input DepartmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  brand_some: BrandWhereInput
  category_some: CategoryWhereInput
  images_some: ImageWhereInput
  images_every: ImageRestrictedWhereInput
  images_none: ImageRestrictedWhereInput
  AND: [DepartmentWhereInput!]
}

input DepartmentWhereUniqueInput {
  id: ID
}

type Feed {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String!
  url: String!
  author: User!
  liked(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type FeedConnection {
  pageInfo: PageInfo!
  edges: [FeedEdge]!
  aggregate: AggregateFeed!
}

input FeedCreateInput {
  id: ID
  description: String!
  url: String!
  author: UserCreateOneWithoutPostsInput!
  liked: UserCreateManyWithoutLikedInput
}

input FeedCreateManyWithoutAuthorInput {
  create: [FeedCreateWithoutAuthorInput!]
  connect: [FeedWhereUniqueInput!]
}

input FeedCreateManyWithoutLikedInput {
  create: [FeedCreateWithoutLikedInput!]
  connect: [FeedWhereUniqueInput!]
}

input FeedCreateWithoutAuthorInput {
  id: ID
  description: String!
  url: String!
  liked: UserCreateManyWithoutLikedInput
}

input FeedCreateWithoutLikedInput {
  id: ID
  description: String!
  url: String!
  author: UserCreateOneWithoutPostsInput!
}

type FeedEdge {
  node: Feed!
  cursor: String!
}

enum FeedOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
}

type FeedPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String!
  url: String!
}

input FeedScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [FeedScalarWhereInput!]
  OR: [FeedScalarWhereInput!]
  NOT: [FeedScalarWhereInput!]
}

type FeedSubscriptionPayload {
  mutation: MutationType!
  node: Feed
  updatedFields: [String!]
  previousValues: FeedPreviousValues
}

input FeedSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FeedWhereInput
  AND: [FeedSubscriptionWhereInput!]
}

input FeedUpdateInput {
  description: String
  url: String
  author: UserUpdateOneRequiredWithoutPostsInput
  liked: UserUpdateManyWithoutLikedInput
}

input FeedUpdateManyDataInput {
  description: String
  url: String
}

input FeedUpdateManyMutationInput {
  description: String
  url: String
}

input FeedUpdateManyWithoutAuthorInput {
  create: [FeedCreateWithoutAuthorInput!]
  delete: [FeedWhereUniqueInput!]
  connect: [FeedWhereUniqueInput!]
  set: [FeedWhereUniqueInput!]
  disconnect: [FeedWhereUniqueInput!]
  update: [FeedUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [FeedUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [FeedScalarWhereInput!]
  updateMany: [FeedUpdateManyWithWhereNestedInput!]
}

input FeedUpdateManyWithoutLikedInput {
  create: [FeedCreateWithoutLikedInput!]
  delete: [FeedWhereUniqueInput!]
  connect: [FeedWhereUniqueInput!]
  set: [FeedWhereUniqueInput!]
  disconnect: [FeedWhereUniqueInput!]
  update: [FeedUpdateWithWhereUniqueWithoutLikedInput!]
  upsert: [FeedUpsertWithWhereUniqueWithoutLikedInput!]
  deleteMany: [FeedScalarWhereInput!]
  updateMany: [FeedUpdateManyWithWhereNestedInput!]
}

input FeedUpdateManyWithWhereNestedInput {
  where: FeedScalarWhereInput!
  data: FeedUpdateManyDataInput!
}

input FeedUpdateWithoutAuthorDataInput {
  description: String
  url: String
  liked: UserUpdateManyWithoutLikedInput
}

input FeedUpdateWithoutLikedDataInput {
  description: String
  url: String
  author: UserUpdateOneRequiredWithoutPostsInput
}

input FeedUpdateWithWhereUniqueWithoutAuthorInput {
  where: FeedWhereUniqueInput!
  data: FeedUpdateWithoutAuthorDataInput!
}

input FeedUpdateWithWhereUniqueWithoutLikedInput {
  where: FeedWhereUniqueInput!
  data: FeedUpdateWithoutLikedDataInput!
}

input FeedUpsertWithWhereUniqueWithoutAuthorInput {
  where: FeedWhereUniqueInput!
  update: FeedUpdateWithoutAuthorDataInput!
  create: FeedCreateWithoutAuthorInput!
}

input FeedUpsertWithWhereUniqueWithoutLikedInput {
  where: FeedWhereUniqueInput!
  update: FeedUpdateWithoutLikedDataInput!
  create: FeedCreateWithoutLikedInput!
}

input FeedWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  author: UserWhereInput
  liked_some: UserWhereInput
  AND: [FeedWhereInput!]
}

input FeedWhereUniqueInput {
  id: ID
}

type Image {
  id: ID!
  createdAt: DateTime!
  url: String!
}

input ImageCreateInput {
  id: ID
  url: String!
}

input ImageCreateManyInput {
  create: [ImageCreateInput!]
}

input ImageRestrictedWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [ImageRestrictedWhereInput!]
}

input ImageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [ImageScalarWhereInput!]
  OR: [ImageScalarWhereInput!]
  NOT: [ImageScalarWhereInput!]
}

input ImageUpdateDataInput {
  url: String
}

input ImageUpdateManyDataInput {
  url: String
}

input ImageUpdateManyInput {
  create: [ImageCreateInput!]
  update: [ImageUpdateWithWhereUniqueNestedInput!]
  upsert: [ImageUpsertWithWhereUniqueNestedInput!]
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  updateMany: [ImageUpdateManyWithWhereNestedInput!]
}

input ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput!
  data: ImageUpdateManyDataInput!
}

input ImageUpdateWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput!
  data: ImageUpdateDataInput!
}

input ImageUpsertWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput!
  update: ImageUpdateDataInput!
  create: ImageCreateInput!
}

input ImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [ImageWhereInput!]
}

input ImageWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBrand(data: BrandCreateInput!): Brand!
  updateBrand(data: BrandUpdateInput!, where: BrandWhereUniqueInput!): Brand
  updateManyBrands(data: BrandUpdateManyMutationInput!, where: BrandWhereInput): BatchPayload!
  upsertBrand(where: BrandWhereUniqueInput!, create: BrandCreateInput!, update: BrandUpdateInput!): Brand!
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteManyBrands(where: BrandWhereInput): BatchPayload!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createDepartment(data: DepartmentCreateInput!): Department!
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateManyDepartments(data: DepartmentUpdateManyMutationInput!, where: DepartmentWhereInput): BatchPayload!
  upsertDepartment(where: DepartmentWhereUniqueInput!, create: DepartmentCreateInput!, update: DepartmentUpdateInput!): Department!
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteManyDepartments(where: DepartmentWhereInput): BatchPayload!
  createFeed(data: FeedCreateInput!): Feed!
  updateFeed(data: FeedUpdateInput!, where: FeedWhereUniqueInput!): Feed
  updateManyFeeds(data: FeedUpdateManyMutationInput!, where: FeedWhereInput): BatchPayload!
  upsertFeed(where: FeedWhereUniqueInput!, create: FeedCreateInput!, update: FeedUpdateInput!): Feed!
  deleteFeed(where: FeedWhereUniqueInput!): Feed
  deleteManyFeeds(where: FeedWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createProductEntity(data: ProductEntityCreateInput!): ProductEntity!
  updateProductEntity(data: ProductEntityUpdateInput!, where: ProductEntityWhereUniqueInput!): ProductEntity
  updateManyProductEntities(data: ProductEntityUpdateManyMutationInput!, where: ProductEntityWhereInput): BatchPayload!
  upsertProductEntity(where: ProductEntityWhereUniqueInput!, create: ProductEntityCreateInput!, update: ProductEntityUpdateInput!): ProductEntity!
  deleteProductEntity(where: ProductEntityWhereUniqueInput!): ProductEntity
  deleteManyProductEntities(where: ProductEntityWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isFeatured: Boolean
  name: String!
  slug: String!
  PID: String!
  description: String
  brand: Brand!
  category: Category!
  entity(where: ProductEntityWhereInput, orderBy: ProductEntityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductEntity!]
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  isFeatured: Boolean
  name: String!
  slug: String!
  PID: String!
  description: String
  brand: BrandCreateOneWithoutProductInput!
  category: CategoryCreateOneWithoutProductInput!
  entity: ProductEntityCreateManyWithoutProductInput
}

input ProductCreateManyWithoutBrandInput {
  create: [ProductCreateWithoutBrandInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneWithoutEntityInput {
  create: ProductCreateWithoutEntityInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutBrandInput {
  id: ID
  isFeatured: Boolean
  name: String!
  slug: String!
  PID: String!
  description: String
  category: CategoryCreateOneWithoutProductInput!
  entity: ProductEntityCreateManyWithoutProductInput
}

input ProductCreateWithoutCategoryInput {
  id: ID
  isFeatured: Boolean
  name: String!
  slug: String!
  PID: String!
  description: String
  brand: BrandCreateOneWithoutProductInput!
  entity: ProductEntityCreateManyWithoutProductInput
}

input ProductCreateWithoutEntityInput {
  id: ID
  isFeatured: Boolean
  name: String!
  slug: String!
  PID: String!
  description: String
  brand: BrandCreateOneWithoutProductInput!
  category: CategoryCreateOneWithoutProductInput!
}

type ProductEdge {
  node: Product!
  cursor: String!
}

type ProductEntity {
  id: ID!
  color: Color!
  size: Size!
  images: [Image!]
  product: Product!
  price: Int!
  quantity: Int!
  releaseDate: DateTime
}

type ProductEntityConnection {
  pageInfo: PageInfo!
  edges: [ProductEntityEdge]!
  aggregate: AggregateProductEntity!
}

input ProductEntityCreateInput {
  id: ID
  color: ColorCreateOneInput!
  size: SizeCreateOneInput!
  images: ImageCreateManyInput
  product: ProductCreateOneWithoutEntityInput!
  price: Int!
  quantity: Int!
  releaseDate: DateTime
}

input ProductEntityCreateManyWithoutProductInput {
  create: [ProductEntityCreateWithoutProductInput!]
  connect: [ProductEntityWhereUniqueInput!]
}

input ProductEntityCreateWithoutProductInput {
  id: ID
  color: ColorCreateOneInput!
  size: SizeCreateOneInput!
  images: ImageCreateManyInput
  price: Int!
  quantity: Int!
  releaseDate: DateTime
}

type ProductEntityEdge {
  node: ProductEntity!
  cursor: String!
}

enum ProductEntityOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  quantity_ASC
  quantity_DESC
  releaseDate_ASC
  releaseDate_DESC
}

type ProductEntityPreviousValues {
  id: ID!
  price: Int!
  quantity: Int!
  releaseDate: DateTime
}

input ProductEntityScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  releaseDate: DateTime
  releaseDate_not: DateTime
  releaseDate_in: [DateTime!]
  releaseDate_not_in: [DateTime!]
  releaseDate_lt: DateTime
  releaseDate_lte: DateTime
  releaseDate_gt: DateTime
  releaseDate_gte: DateTime
  AND: [ProductEntityScalarWhereInput!]
  OR: [ProductEntityScalarWhereInput!]
  NOT: [ProductEntityScalarWhereInput!]
}

type ProductEntitySubscriptionPayload {
  mutation: MutationType!
  node: ProductEntity
  updatedFields: [String!]
  previousValues: ProductEntityPreviousValues
}

input ProductEntitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductEntityWhereInput
  AND: [ProductEntitySubscriptionWhereInput!]
}

input ProductEntityUpdateInput {
  color: ColorUpdateOneRequiredInput
  size: SizeUpdateOneRequiredInput
  images: ImageUpdateManyInput
  product: ProductUpdateOneRequiredWithoutEntityInput
  price: Int
  quantity: Int
  releaseDate: DateTime
}

input ProductEntityUpdateManyDataInput {
  price: Int
  quantity: Int
  releaseDate: DateTime
}

input ProductEntityUpdateManyMutationInput {
  price: Int
  quantity: Int
  releaseDate: DateTime
}

input ProductEntityUpdateManyWithoutProductInput {
  create: [ProductEntityCreateWithoutProductInput!]
  delete: [ProductEntityWhereUniqueInput!]
  connect: [ProductEntityWhereUniqueInput!]
  set: [ProductEntityWhereUniqueInput!]
  disconnect: [ProductEntityWhereUniqueInput!]
  update: [ProductEntityUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [ProductEntityUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [ProductEntityScalarWhereInput!]
  updateMany: [ProductEntityUpdateManyWithWhereNestedInput!]
}

input ProductEntityUpdateManyWithWhereNestedInput {
  where: ProductEntityScalarWhereInput!
  data: ProductEntityUpdateManyDataInput!
}

input ProductEntityUpdateWithoutProductDataInput {
  color: ColorUpdateOneRequiredInput
  size: SizeUpdateOneRequiredInput
  images: ImageUpdateManyInput
  price: Int
  quantity: Int
  releaseDate: DateTime
}

input ProductEntityUpdateWithWhereUniqueWithoutProductInput {
  where: ProductEntityWhereUniqueInput!
  data: ProductEntityUpdateWithoutProductDataInput!
}

input ProductEntityUpsertWithWhereUniqueWithoutProductInput {
  where: ProductEntityWhereUniqueInput!
  update: ProductEntityUpdateWithoutProductDataInput!
  create: ProductEntityCreateWithoutProductInput!
}

input ProductEntityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  color: ColorWhereInput
  size: SizeWhereInput
  images_some: ImageWhereInput
  images_every: ImageRestrictedWhereInput
  images_none: ImageRestrictedWhereInput
  product: ProductWhereInput
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  releaseDate: DateTime
  releaseDate_not: DateTime
  releaseDate_in: [DateTime!]
  releaseDate_not_in: [DateTime!]
  releaseDate_lt: DateTime
  releaseDate_lte: DateTime
  releaseDate_gt: DateTime
  releaseDate_gte: DateTime
  AND: [ProductEntityWhereInput!]
}

input ProductEntityWhereUniqueInput {
  id: ID
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isFeatured_ASC
  isFeatured_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  PID_ASC
  PID_DESC
  description_ASC
  description_DESC
}

type ProductPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isFeatured: Boolean
  name: String!
  slug: String!
  PID: String!
  description: String
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  isFeatured: Boolean
  isFeatured_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  PID: String
  PID_not: String
  PID_in: [String!]
  PID_not_in: [String!]
  PID_lt: String
  PID_lte: String
  PID_gt: String
  PID_gte: String
  PID_contains: String
  PID_not_contains: String
  PID_starts_with: String
  PID_not_starts_with: String
  PID_ends_with: String
  PID_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  isFeatured: Boolean
  name: String
  slug: String
  PID: String
  description: String
  brand: BrandUpdateOneRequiredWithoutProductInput
  category: CategoryUpdateOneRequiredWithoutProductInput
  entity: ProductEntityUpdateManyWithoutProductInput
}

input ProductUpdateManyDataInput {
  isFeatured: Boolean
  name: String
  slug: String
  PID: String
  description: String
}

input ProductUpdateManyMutationInput {
  isFeatured: Boolean
  name: String
  slug: String
  PID: String
  description: String
}

input ProductUpdateManyWithoutBrandInput {
  create: [ProductCreateWithoutBrandInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutBrandInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutBrandInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredWithoutEntityInput {
  create: ProductCreateWithoutEntityInput
  update: ProductUpdateWithoutEntityDataInput
  upsert: ProductUpsertWithoutEntityInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateWithoutBrandDataInput {
  isFeatured: Boolean
  name: String
  slug: String
  PID: String
  description: String
  category: CategoryUpdateOneRequiredWithoutProductInput
  entity: ProductEntityUpdateManyWithoutProductInput
}

input ProductUpdateWithoutCategoryDataInput {
  isFeatured: Boolean
  name: String
  slug: String
  PID: String
  description: String
  brand: BrandUpdateOneRequiredWithoutProductInput
  entity: ProductEntityUpdateManyWithoutProductInput
}

input ProductUpdateWithoutEntityDataInput {
  isFeatured: Boolean
  name: String
  slug: String
  PID: String
  description: String
  brand: BrandUpdateOneRequiredWithoutProductInput
  category: CategoryUpdateOneRequiredWithoutProductInput
}

input ProductUpdateWithWhereUniqueWithoutBrandInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutBrandDataInput!
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoryDataInput!
}

input ProductUpsertWithoutEntityInput {
  update: ProductUpdateWithoutEntityDataInput!
  create: ProductCreateWithoutEntityInput!
}

input ProductUpsertWithWhereUniqueWithoutBrandInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutBrandDataInput!
  create: ProductCreateWithoutBrandInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoryDataInput!
  create: ProductCreateWithoutCategoryInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  isFeatured: Boolean
  isFeatured_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  PID: String
  PID_not: String
  PID_in: [String!]
  PID_not_in: [String!]
  PID_lt: String
  PID_lte: String
  PID_gt: String
  PID_gte: String
  PID_contains: String
  PID_not_contains: String
  PID_starts_with: String
  PID_not_starts_with: String
  PID_ends_with: String
  PID_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  brand: BrandWhereInput
  category: CategoryWhereInput
  entity_some: ProductEntityWhereInput
  AND: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  brand(where: BrandWhereUniqueInput!): Brand
  brands(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Brand]!
  brandsConnection(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrandConnection!
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  department(where: DepartmentWhereUniqueInput!): Department
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  departmentsConnection(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentConnection!
  feed(where: FeedWhereUniqueInput!): Feed
  feeds(where: FeedWhereInput, orderBy: FeedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feed]!
  feedsConnection(where: FeedWhereInput, orderBy: FeedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeedConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  productEntity(where: ProductEntityWhereUniqueInput!): ProductEntity
  productEntities(where: ProductEntityWhereInput, orderBy: ProductEntityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductEntity]!
  productEntitiesConnection(where: ProductEntityWhereInput, orderBy: ProductEntityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductEntityConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Size {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  slug: String!
  value: String!
}

input SizeCreateInput {
  id: ID
  slug: String!
  value: String!
}

input SizeCreateOneInput {
  create: SizeCreateInput
}

input SizeUpdateDataInput {
  slug: String
  value: String
}

input SizeUpdateOneRequiredInput {
  create: SizeCreateInput
  update: SizeUpdateDataInput
  upsert: SizeUpsertNestedInput
  connect: SizeWhereUniqueInput
}

input SizeUpsertNestedInput {
  update: SizeUpdateDataInput!
  create: SizeCreateInput!
}

input SizeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [SizeWhereInput!]
}

input SizeWhereUniqueInput {
  id: ID
}

type Subscription {
  brand(where: BrandSubscriptionWhereInput): BrandSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  department(where: DepartmentSubscriptionWhereInput): DepartmentSubscriptionPayload
  feed(where: FeedSubscriptionWhereInput): FeedSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  productEntity(where: ProductEntitySubscriptionWhereInput): ProductEntitySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  password: String!
  birthdate: DateTime
  email: String!
  posts(where: FeedWhereInput, orderBy: FeedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feed!]
  liked(where: FeedWhereInput, orderBy: FeedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feed!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  password: String!
  birthdate: DateTime
  email: String!
  posts: FeedCreateManyWithoutAuthorInput
  liked: FeedCreateManyWithoutLikedInput
}

input UserCreateManyWithoutLikedInput {
  create: [UserCreateWithoutLikedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutLikedInput {
  id: ID
  username: String!
  password: String!
  birthdate: DateTime
  email: String!
  posts: FeedCreateManyWithoutAuthorInput
}

input UserCreateWithoutPostsInput {
  id: ID
  username: String!
  password: String!
  birthdate: DateTime
  email: String!
  liked: FeedCreateManyWithoutLikedInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  birthdate_ASC
  birthdate_DESC
  email_ASC
  email_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  password: String!
  birthdate: DateTime
  email: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  birthdate: DateTime
  birthdate_not: DateTime
  birthdate_in: [DateTime!]
  birthdate_not_in: [DateTime!]
  birthdate_lt: DateTime
  birthdate_lte: DateTime
  birthdate_gt: DateTime
  birthdate_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  password: String
  birthdate: DateTime
  email: String
  posts: FeedUpdateManyWithoutAuthorInput
  liked: FeedUpdateManyWithoutLikedInput
}

input UserUpdateManyDataInput {
  username: String
  password: String
  birthdate: DateTime
  email: String
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  birthdate: DateTime
  email: String
}

input UserUpdateManyWithoutLikedInput {
  create: [UserCreateWithoutLikedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutLikedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutLikedInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutLikedDataInput {
  username: String
  password: String
  birthdate: DateTime
  email: String
  posts: FeedUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutPostsDataInput {
  username: String
  password: String
  birthdate: DateTime
  email: String
  liked: FeedUpdateManyWithoutLikedInput
}

input UserUpdateWithWhereUniqueWithoutLikedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutLikedDataInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithWhereUniqueWithoutLikedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutLikedDataInput!
  create: UserCreateWithoutLikedInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  birthdate: DateTime
  birthdate_not: DateTime
  birthdate_in: [DateTime!]
  birthdate_not_in: [DateTime!]
  birthdate_lt: DateTime
  birthdate_lte: DateTime
  birthdate_gt: DateTime
  birthdate_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  posts_some: FeedWhereInput
  liked_some: FeedWhereInput
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
`
}
